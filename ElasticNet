from sklearn.metrics import r2_score
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import ElasticNetCV

lratios = []
for lratio in range(1,10):
  eNet = make_pipeline(StandardScaler(with_mean=False), 
                       ElasticNetCV(l1_ratio = lratio/10,
                                    max_iter=100000))
  eNet.fit(train_data,train_out)

  train_pred_eNet = eNet.predict(train_data)
  lratios.append(r2_score(train_pred_eNet,train_out))

final_lratio = np.argmax(np.array(lratios) + 1)/10

eNet = make_pipeline(StandardScaler(with_mean=False),
                     ElasticNetCV(l1_ratio = final_lratio, 
                                  max_iter=100000))
eNet.fit(train_data,train_out)

train_pred_eNet = eNet.predict(train_data)
print(r2_score(train_pred_eNet,train_out))

plt.scatter(train_pred_eNet,train_out)
plt.ylabel("Pedicted Value")
plt.xlabel("Actual Value")
plt.show()


test_pred_eNet = eNet.predict(test1_data)
print(r2_score(test_pred_eNet,test1_out))

plt.scatter(test_pred_eNet,test1_out)
plt.ylabel("Pedicted Value")
plt.xlabel("Actual Value")
plt.show()
